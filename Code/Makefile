##########################################################################################################################
# File automatically-generated by tool: [projectgenerator] version: [3.14.1] date: [Sat Nov 05 19:47:02 CST 2022] 
##########################################################################################################################

# ------------------------------------------------
# Generic Makefile (based on gcc)
#
# ChangeLog :
#	2017-02-10 - Several enhancements + project update mode
#   2015-07-22 - first version
# ------------------------------------------------

######################################
# target
######################################
TARGET = drone-iii-401

DEVICE = STM32F401RE
JLINK_CONFIG_FILENAME = stm32f4_config.jlink

######################################
# building variables
######################################
# debug build?
DEBUG = 1
# optimization
OPT = -Og


#######################################
# paths
#######################################
# Build path
BUILD_DIR = build

C_SOURCES_PATH = \
Drivers/Hardware/Src \
Bsp/Src \
Systemview \
Systemview/Config \
Systemview/SEGGER \
Systemview/Config/Cortex-M \
SDK/Src \
Algorithm/Src \
App/Src

C_INCLUDES =  \
-ICore/Inc \
-IDrivers/STM32F4xx_HAL_Driver/Inc \
-IDrivers/STM32F4xx_HAL_Driver/Inc/Legacy \
-IDrivers/CMSIS/Device/ST/STM32F4xx/Include \
-IDrivers/CMSIS/Include \
-IUcos \
-IDrivers/CMSIS/DSP/Include \
-IDrivers/CMSIS/DSP/PrivateInclude \
-IDrivers/Hardware/Inc \
-IBsp/Inc \
-ISDK/Inc \
-IApp/Inc \
-IAlgorithm/Inc

######################################
# source
######################################
# C sources
C_SOURCES =  \
Core/Src/main.c \
Core/Src/gpio.c \
Core/Src/dma.c \
Core/Src/i2c.c \
Core/Src/usart.c \
Core/Src/stm32f4xx_it.c \
Core/Src/stm32f4xx_hal_msp.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_i2c.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_i2c_ex.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc_ex.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ramfunc.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_gpio.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_dma_ex.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_dma.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr_ex.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_cortex.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_tim.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_tim_ex.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c \
Core/Src/system_stm32f4xx.c \
Ucos/ucos_ii.c \
Ucos/os_cpu_c.c \
Core/Src/tim.c \
Drivers/CMSIS/DSP/Source/CommonTables/CommonTables.c \
Drivers/CMSIS/DSP/Source/BasicMathFunctions/BasicMathFunctions.c \
Drivers/CMSIS/DSP/Source/FastMathFunctions/FastMathFunctions.c \
Drivers/CMSIS/DSP/Source/MatrixFunctions/MatrixFunctions.c \
Drivers/CMSIS/DSP/Source/SupportFunctions/SupportFunctions.c \
Drivers/CMSIS/DSP/Source/QuaternionMathFunctions/arm_quaternion_norm_f32.c
#Systemview/SEGGER/Syscalls/SEGGER_RTT_Syscalls_GCC.c
#Systemview/SEGGER/Syscalls/SEGGER_RTT_Syscalls_GCC.c#Systemview/SEGGER/Syscalls/SEGGER_RTT_Syscalls_GCC.c#Systemview/SEGGER/Syscalls/SEGGER_RTT_Syscalls_GCC.c#Systemview/SEGGER/Syscalls/SEGGER_RTT_Syscalls_GCC.c#Systemview/SEGGER/Syscalls/SEGGER_RTT_Syscalls_GCC.c#Systemview/SEGGER/Syscalls/SEGGER_RTT_Syscalls_GCC.c#Systemview/SEGGER/Syscalls/SEGGER_RTT_Syscalls_GCC.c#Systemview/SEGGER/Syscalls/SEGGER_RTT_Syscalls_GCC.c#Systemview/SEGGER/Syscalls/SEGGER_RTT_Syscalls_GCC.c#Systemview/SEGGER/Syscalls/SEGGER_RTT_Syscalls_GCC.c#Systemview/SEGGER/Syscalls/SEGGER_RTT_Syscalls_GCC.c#Systemview/SEGGER/Syscalls/SEGGER_RTT_Syscalls_GCC.c#Systemview/SEGGER/Syscalls/SEGGER_RTT_Syscalls_GCC.c#Systemview/SEGGER/Syscalls/SEGGER_RTT_Syscalls_GCC.c#Systemview/SEGGER/Syscalls/SEGGER_RTT_Syscalls_GCC.c
C_SOURCES += $(wildcard $(patsubst %,%/*.c,$(C_SOURCES_PATH)))

#$(info $(C_SOURCES))

# ASM sources
S_SOURCES =  \
startup_stm32f401xe.s \
Systemview/SEGGER/SEGGER_RTT_ASM_ARMv7M.s

ASM_SOURCES = \
Ucos/os_cpu_a.asm

#######################################
# binaries
#######################################
PREFIX = arm-none-eabi-
# The gcc compiler bin path can be either defined in make command via GCC_PATH variable (> make GCC_PATH=xxx)
# either it can be added to the PATH environment variable.
ifdef GCC_PATH
CC = $(GCC_PATH)/$(PREFIX)gcc
AS = $(GCC_PATH)/$(PREFIX)gcc -x assembler-with-cpp
CP = $(GCC_PATH)/$(PREFIX)objcopy
SZ = $(GCC_PATH)/$(PREFIX)size
else
CC = $(PREFIX)gcc
AS = $(PREFIX)gcc -x assembler-with-cpp
CP = $(PREFIX)objcopy
SZ = $(PREFIX)size
endif
HEX = $(CP) -O ihex
BIN = $(CP) -O binary -S
 
#######################################
# CFLAGS
#######################################
# cpu
CPU = -mcpu=cortex-m4

# fpu
FPU = -mfpu=fpv4-sp-d16

# float-abi
FLOAT-ABI = -mfloat-abi=hard

# mcu
MCU = $(CPU) -mthumb $(FPU) $(FLOAT-ABI)

# macros for gcc
# AS defines
AS_DEFS =

# C defines
C_DEFS =  \
-DUSE_HAL_DRIVER \
-D__ARMVFP__ \
-DSTM32F401xE


# AS includes
AS_INCLUDES = 

# C includes


C_INCLUDES += $(patsubst %,-I%,$(C_SOURCES_PATH))

# compile gcc flags
ASFLAGS = $(MCU) $(AS_DEFS) $(AS_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections

CFLAGS = $(MCU) $(C_DEFS) $(C_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections

ifeq ($(DEBUG), 1)
CFLAGS += -g -gdwarf-2
endif


# Generate dependency information
CFLAGS += -MMD -MP -MF"$(@:%.o=%.d)"


#######################################
# LDFLAGS
#######################################
# link script
LDSCRIPT = STM32F401RETx_FLASH.ld

# libraries
LIBS = -lc -lm -lnosys 
LIBDIR = 
LDFLAGS = $(MCU) -specs=nano.specs -T$(LDSCRIPT) $(LIBDIR) $(LIBS) -Wl,-Map=$(BUILD_DIR)/$(TARGET).map,--cref -Wl,--gc-sections

LDFLAGS += -u _printf_float

CLEAR_OUTPUT = $(shell rm build/output;)
CHECK_COMPILE = $(shell if [ -f build/output ];then if [ "`cat build/output | grep OK`" != "" ];then echo "\033[32m编译成功\033[0m"; else echo "\033[31m编译失败\033[0m";fi;else echo "文件未更新";fi)
CHECK_DOWNLOAD = $(shell if [ "`cat build/output | grep 'Contents already match'`" != "" ];then echo "\033[32m已烧写\033[0m"; else if [ "`cat build/output | grep O.K.`" != "" ];then echo "\033[32m烧写成功\033[0m";else echo "\033[31m烧写失败\033[0m";fi;fi)

.PHONY : all clean gdbserver gdb download view

# default action: build all
all: clearoutput compiledo
	@echo $(CHECK_COMPILE)

clearoutput:
	$(CLEAR_OUTPUT)

compiledo: $(BUILD_DIR)/$(TARGET).elf $(BUILD_DIR)/$(TARGET).hex $(BUILD_DIR)/$(TARGET).bin force


#######################################
# build the application
#######################################
# list of objects
OBJECTS = $(addprefix $(BUILD_DIR)/,$(notdir $(C_SOURCES:.c=.o)))
vpath %.c $(sort $(dir $(C_SOURCES)))
# list of ASM program objects
OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(S_SOURCES:.s=.o)))
vpath %.s $(sort $(dir $(S_SOURCES)))
OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(ASM_SOURCES:.asm=.o)))
vpath %.asm $(sort $(dir $(ASM_SOURCES)))

$(BUILD_DIR)/%.o: %.c Makefile | $(BUILD_DIR) 
	$(CC) -c $(CFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.c=.lst)) $< -o $@ | tee -a build/output

$(BUILD_DIR)/%.o: %.s Makefile | $(BUILD_DIR)
	$(AS) -c $(CFLAGS) $< -o $@ | tee -a build/output

$(BUILD_DIR)/%.o: %.asm Makefile | $(BUILD_DIR)
	$(AS) -c $(CFLAGS) $< -o $@ | tee -a build/output

$(BUILD_DIR)/$(TARGET).elf: $(OBJECTS) Makefile
	$(CC) $(OBJECTS) $(LDFLAGS) -o $@
	$(SZ) $@

$(BUILD_DIR)/%.hex: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(HEX) $< $@
	
$(BUILD_DIR)/%.bin: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(BIN) $< $@
	@echo "OK" >> build/output
	
$(BUILD_DIR):
	mkdir $@		

#######################################
# clean up
#######################################
clean:
	-rm -fR $(BUILD_DIR)

force:


#######################################
# start jlinkgdbserver
#######################################
gdbserver:
	jlinkgdbserver -if swd -device $(DEVICE)

gs:
	jlinkgdbserver -if swd -device $(DEVICE)

#######################################
# start gdb
#######################################
gdb:
	arm-none-eabi-gdb -x stm32f4_config.gdbinit --nh ./build/$(TARGET).elf


#######################################
# download
#######################################


download: jlinkfile downloaddo
	@echo $(CHECK_DOWNLOAD)

downloaddo:
	$(CLEAR_OUTPUT)
	jlinkExe -device $(DEVICE) -if SWD -speed auto -autoconnect 1 -commandfile "$(JLINK_CONFIG_FILENAME)" | tee -a build/output

jlinkfile: Makefile
	echo "h \n\
loadbin build/$(TARGET).bin 0x8000000 \n\
r \n\
g \n\
q" > $(JLINK_CONFIG_FILENAME)

view:
	open -a Systemview.app

#######################################
# dependencies
#######################################
-include $(wildcard $(BUILD_DIR)/*.d)

# *** EOF ***
